{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\n\r\nexport async function middleware(request) {\r\n  try {\r\n    const authCheckResponse = await fetch(\r\n      \"http://localhost:8001/api/checkAuth\",\r\n      {\r\n        method: \"GET\",\r\n        credentials: \"include\",\r\n        headers: {\r\n          Cookie: request.headers.get(\"cookie\") || \"\",\r\n        },\r\n      }\r\n    );\r\n\r\n    if (!authCheckResponse.ok) {\r\n      throw new Error(\"Failed to fetch authentication data\");\r\n    }\r\n\r\n    const authData = await authCheckResponse.json();\r\n\r\n    if (!authData.isAuthenticated) {\r\n      return NextResponse.redirect(new URL(\"/login\", request.url));\r\n    }\r\n\r\n    return NextResponse.next();\r\n  } catch (error) {\r\n    console.error(\"Error during fetch:\", error);\r\n    return NextResponse.redirect(new URL(\"/login\", request.url));\r\n  }\r\n}\r\n\r\nexport const config = {\r\n  matcher: \"/uploadteams/:path*\",\r\n};\r\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEO,eAAe,WAAW,OAAO;IACtC,IAAI;QACF,MAAM,oBAAoB,MAAM,MAC9B,uCACA;YACE,QAAQ;YACR,aAAa;YACb,SAAS;gBACP,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;YAC3C;QACF;QAGF,IAAI,CAAC,kBAAkB,EAAE,EAAE;YACzB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,WAAW,MAAM,kBAAkB,IAAI;QAE7C,IAAI,CAAC,SAAS,eAAe,EAAE;YAC7B,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC5D;QAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;AACX"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}